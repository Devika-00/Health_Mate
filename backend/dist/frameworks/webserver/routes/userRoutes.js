"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userDbRepository_1 = require("../../../app/interfaces/userDbRepository");
const authService_1 = require("../../services/authService");
const userRepositoryMongodb_1 = require("../../database/mongodb/repositories/userRepositoryMongodb");
const authServiceInterface_1 = require("../../../app/service-interface/authServiceInterface");
const userController_1 = __importDefault(require("../../../adapters/userController"));
const authMiddleware_1 = __importDefault(require("../middlewares/authMiddleware"));
const doctorDBRepository_1 = require("../../../app/interfaces/doctorDBRepository");
const doctorRepositoryMongodb_1 = require("../../database/mongodb/repositories/doctorRepositoryMongodb");
const timeSlotDbRepository_1 = require("../../../app/interfaces/timeSlotDbRepository");
const timeSlotRepositotyMongodb_1 = require("../../database/mongodb/repositories/timeSlotRepositotyMongodb");
const bookingController_1 = __importDefault(require("../../../adapters/bookingController"));
const bookingDbRepository_1 = require("../../../app/interfaces/bookingDbRepository");
const BookingRepositoryMongodb_1 = require("../../database/mongodb/repositories/BookingRepositoryMongodb");
const prescriptionDbRepository_1 = require("../../../app/interfaces/prescriptionDbRepository");
const prescriptionRepositoryMongodb_1 = require("../../database/mongodb/repositories/prescriptionRepositoryMongodb");
const departmentDbRepository_1 = require("../../../app/interfaces/departmentDbRepository");
const departmentRepositoryMongodb_1 = require("../../database/mongodb/repositories/departmentRepositoryMongodb");
const userRoutes = () => {
    const router = express_1.default.Router();
    const controller = (0, userController_1.default)(authServiceInterface_1.authServiceInterface, authService_1.authService, userDbRepository_1.userDbRepository, userRepositoryMongodb_1.userRepositoryMongodb, doctorDBRepository_1.doctorDbRepository, doctorRepositoryMongodb_1.doctorRepositoryMongodb, timeSlotDbRepository_1.timeSlotDbRepository, timeSlotRepositotyMongodb_1.timeSlotRepositoryMongodb, prescriptionDbRepository_1.prescriptionDbRepository, prescriptionRepositoryMongodb_1.prescriptionRepositoryMongodb, departmentDbRepository_1.departmentDbRepository, departmentRepositoryMongodb_1.departmentRepositoryMongodb);
    const _bookingController = (0, bookingController_1.default)(userDbRepository_1.userDbRepository, userRepositoryMongodb_1.userRepositoryMongodb, doctorDBRepository_1.doctorDbRepository, doctorRepositoryMongodb_1.doctorRepositoryMongodb, timeSlotDbRepository_1.timeSlotDbRepository, timeSlotRepositotyMongodb_1.timeSlotRepositoryMongodb, bookingDbRepository_1.bookingDbRepository, BookingRepositoryMongodb_1.bookingRepositoryMongodb);
    //user Authentication Routes//
    router.post("/register", controller.registerUser);
    router.post("/verify_otp", controller.verifyOtp);
    router.post("/resend_otp", controller.resendOtp);
    router.post("/login", controller.userLogin);
    router.post("/google_signIn", controller.googleSignIn);
    router.post("/forgot_password", controller.forgotPassword);
    router.post("/reset_password/:token", controller.resetPassword);
    router.get("/profile", authMiddleware_1.default, controller.userProfile);
    router.get("/doctors", authMiddleware_1.default, controller.doctorPage);
    router.get("/timeslots", authMiddleware_1.default, controller.getAllTimeSlots);
    router.get("/doctor/:id", authMiddleware_1.default, controller.doctorDetails);
    router.patch("/profile/edit", authMiddleware_1.default, controller.updateUserInfo);
    router.get("/timeslots/:id", authMiddleware_1.default, controller.getTimeslots);
    router.get("/time-slots/:id/dates", authMiddleware_1.default, controller.getDateSlots);
    router.post("/fetchPrescription", authMiddleware_1.default, controller.fetchPrescription);
    router.post("/uploadDocuments", authMiddleware_1.default, controller.labRecords);
    router.get("/documents/:id", authMiddleware_1.default, controller.fetchDocuments);
    router.delete("/documents/:id", authMiddleware_1.default, controller.deleteDocument);
    router.get("/fetchWallet/:id", authMiddleware_1.default, controller.getWallet);
    router.get("/transactions", authMiddleware_1.default, controller.getTransactions);
    router.get("/departments", authMiddleware_1.default, controller.getAllDepartments);
    /*  Booking Routes for booking Controller  */
    router.post("/appointments", authMiddleware_1.default, _bookingController.BookAppoinment);
    router.get("/allAppoinments", authMiddleware_1.default, _bookingController.getAllAppoinments);
    router.patch("/payment/status/:id", authMiddleware_1.default, _bookingController.updatePaymentStatus);
    router.post("/walletPayment", authMiddleware_1.default, _bookingController.walletPayment);
    router.put("/updateWallet", authMiddleware_1.default, _bookingController.changeWalletAmount);
    router.get("/bookingdetails/:id", authMiddleware_1.default, _bookingController.getBookingDetails);
    router.get("/bookings/:id", authMiddleware_1.default, _bookingController.getAllBookingDetails);
    router.put("/bookingdetails/:id", authMiddleware_1.default, _bookingController.cancelAppoinment);
    return router;
};
exports.default = userRoutes;
